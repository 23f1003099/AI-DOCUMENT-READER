import React, { useState } from 'react';
import { BookOpen, FileText, Download, Save, RefreshCw } from 'lucide-react';
import { useApp } from '../../contexts/AppContext';

const SmartNotes = () => {
  const { documents } = useApp();
  const [selectedDocument, setSelectedDocument] = useState('');
  const [notes, setNotes] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);

  const generateNotes = async () => {
    if (!selectedDocument) return;
    
    setIsGenerating(true);
    
    // Simulate AI processing
    setTimeout(() => {
      const mockNotes = `# Smart Notes for ${selectedDocument}

## Key Concepts
• **Main Topic 1**: Overview of core principles and foundational concepts
• **Main Topic 2**: Detailed analysis of important theories and applications
• **Main Topic 3**: Practical examples and real-world implementations

## Important Points
• Critical insight #1 - This concept is essential for understanding the broader context
• Critical insight #2 - The relationship between different elements is crucial
• Critical insight #3 - Applications and implications for future study

## Summary
This document covers several important areas that are fundamental to the subject matter. The key takeaways provide a solid foundation for further exploration and study.

## Questions for Review
1. What are the main principles discussed?
2. How do these concepts relate to other topics?
3. What are the practical applications?

---
*Generated by AI on ${new Date().toLocaleDateString()}*`;

      setNotes(mockNotes);
      setIsGenerating(false);
    }, 2000);
  };

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* Header */}
      <div className="text-center">
        <div className="flex items-center justify-center space-x-2 mb-4">
          <BookOpen className="w-8 h-8 text-purple-600 dark:text-purple-400" />
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Smart Notes</h1>
        </div>
        <p className="text-gray-600 dark:text-gray-400">
          Generate intelligent, structured notes from your documents
        </p>
      </div>

      {/* Document Selection */}
      <div className="bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
          <div className="flex-1">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
              Select Document
            </h3>
            <select
              value={selectedDocument}
              onChange={(e) => setSelectedDocument(e.target.value)}
              className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent"
            >
              <option value="">Choose a document...</option>
              {documents.map((doc) => (
                <option key={doc.id} value={doc.name}>
                  {doc.name}
                </option>
              ))}
            </select>
          </div>
          
          <button
            onClick={generateNotes}
            disabled={!selectedDocument || isGenerating}
            className="bg-purple-600 hover:bg-purple-700 disabled:bg-gray-400 text-white px-6 py-2 rounded-lg font-medium flex items-center space-x-2 transition-colors"
          >
            {isGenerating ? (
              <>
                <RefreshCw className="w-4 h-4 animate-spin" />
                <span>Generating...</span>
              </>
            ) : (
              <>
                <BookOpen className="w-4 h-4" />
                <span>Generate Notes</span>
              </>
            )}
          </button>
        </div>
      </div>

      {/* Notes Editor */}
      <div className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 overflow-hidden">
        <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
            Generated Notes
          </h3>
          
          {notes && (
            <div className="flex space-x-2">
              <button className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg text-sm font-medium flex items-center space-x-2 transition-colors">
                <Save className="w-4 h-4" />
                <span>Save</span>
              </button>
              <button className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium flex items-center space-x-2 transition-colors">
                <Download className="w-4 h-4" />
                <span>Export</span>
              </button>
            </div>
          )}
        </div>
        
        <div className="p-6">
          {notes ? (
            <textarea
              value={notes}
              onChange={(e) => setNotes(e.target.value)}
              className="w-full h-96 p-4 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white font-mono text-sm resize-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              placeholder="Your generated notes will appear here..."
            />
          ) : (
            <div className="text-center py-12">
              <FileText className="w-16 h-16 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                No notes generated yet
              </h3>
              <p className="text-gray-500 dark:text-gray-400">
                Select a document and click "Generate Notes" to get started
              </p>
            </div>
          )}
        </div>
      </div>

      {/* Features */}
      <div className="grid md:grid-cols-3 gap-6">
        <div className="bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700">
          <div className="w-12 h-12 bg-purple-100 dark:bg-purple-900 rounded-lg flex items-center justify-center mb-4">
            <BookOpen className="w-6 h-6 text-purple-600 dark:text-purple-400" />
          </div>
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
            Smart Structure
          </h3>
          <p className="text-gray-600 dark:text-gray-400 text-sm">
            Automatically organizes content into logical sections with headings and bullet points
          </p>
        </div>
        
        <div className="bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700">
          <div className="w-12 h-12 bg-green-100 dark:bg-green-900 rounded-lg flex items-center justify-center mb-4">
            <FileText className="w-6 h-6 text-green-600 dark:text-green-400" />
          </div>
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
            Key Insights
          </h3>
          <p className="text-gray-600 dark:text-gray-400 text-sm">
            Highlights the most important concepts and relationships from your documents
          </p>
        </div>
        
        <div className="bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700">
          <div className="w-12 h-12 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center mb-4">
            <Save className="w-6 h-6 text-blue-600 dark:text-blue-400" />
          </div>
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
            Editable Format
          </h3>
          <p className="text-gray-600 dark:text-gray-400 text-sm">
            Edit, customize, and export your notes in multiple formats for easy sharing
          </p>
        </div>
      </div>
    </div>
  );
};

export default SmartNotes;